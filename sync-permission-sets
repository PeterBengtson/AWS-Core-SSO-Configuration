#!/usr/bin/env zsh

RED="\e[31m"
GREEN="\e[32m"
YELLOW="\e[33m"
ENDCOLOR="\e[0m"


config_dir=""
dry_run=false

while (( "$#" )); do
  case "$1" in
    --config-dir)
      config_dir="$2"
      shift 2
      ;;
    --dry-run)
      dry_run=true
      shift
      ;;
    *)
      if [ -z "$config_dir" ]; then
        config_dir="conf/$1/sso_permission_sets"
      else
        echo -e "${RED}ERROR: --config-dir and positional argument cannot be used together${ENDCOLOR}"
        exit 1
      fi
      shift
      ;;
  esac
done

if [ -z "$config_dir" ] ; then
    echo -e "${RED}ERROR: Please specify a subdirectory or use --config-dir${ENDCOLOR}"
    exit 1
fi

if ! [ -d $config_dir ] ; then
    echo -e "${RED}ERROR: The directory $config_dir doesn't exist${ENDCOLOR}"
    exit 1
fi

instance_arn=$(aws sso-admin list-instances --query 'Instances[0].InstanceArn' --output text --no-paginate)
identity_store_id=$(aws sso-admin list-instances --query 'Instances[0].IdentityStoreId' --output text --no-paginate)


echo
if [[ $instance_arn =~ ^arn:aws:sso:::instance/ssoins- && $identity_store_id =~ ^d-[a-zA-Z0-9]+$ ]]; then
  echo "${GREEN}Using default AWS SSO identity provider${ENDCOLOR}"
else
  echo "${GREEN}Using external identity provider${ENDCOLOR}"
fi
echo "    ${GREEN}SSO Instance ARN:      ${YELLOW}$instance_arn${ENDCOLOR}"
echo "    ${GREEN}SSO Identity Store ID: ${YELLOW}$identity_store_id${ENDCOLOR}"


get_permission_set_name() {
    local permission_set_name=$(aws sso-admin describe-permission-set --instance-arn $instance_arn --permission-set-arn $1 \
        --query 'PermissionSet.Name' --output text --no-paginate)
    echo $permission_set_name
}

get_all_permission_sets() {
    local next_token=""
    local all_permission_sets=""

    while true; do
        if [ -z "$next_token" ]; then
            result=$(aws sso-admin list-permission-sets --instance-arn $instance_arn --output json)
        else
            result=$(aws sso-admin list-permission-sets --instance-arn $instance_arn --output json --next-token $next_token)
        fi

        all_permission_sets="$all_permission_sets $(echo $result | jq -r '.PermissionSets[]')"
        next_token=$(echo $result | jq -r '.NextToken')

        if [ "$next_token" = "null" ]; then
            break
        fi
    done

    echo $all_permission_sets
}

echo
echo -e ${YELLOW}Retrieving permission sets...${ENDCOLOR}
permission_set_arns=$(get_all_permission_sets)
declare -A PERMISSION_SET_ARNS=()
for permission_set_arn in $(echo $permission_set_arns)
do
    permission_set_name=$(get_permission_set_name $permission_set_arn)
    PERMISSION_SET_ARNS[$permission_set_name]="$permission_set_arn"
done


get_permission_set_arn() {
    echo $PERMISSION_SET_ARNS[$1]
}

get_all_aws_managed_policies() {
    local marker=""
    local all_policies=""

    while true; do
        if [ -z "$marker" ]; then
            result=$(aws iam list-policies --scope AWS --policy-usage-filter PermissionsPolicy --output json)
        else
            result=$(aws iam list-policies --scope AWS --policy-usage-filter PermissionsPolicy --output json --marker $marker)
        fi

        all_policies="$all_policies $(echo $result | jq -c '.Policies[]')"
        marker=$(echo $result | jq -r '.Marker')

        if [ "$marker" = "null" ]; then
            break
        fi
    done

    echo $all_policies
}

echo -e "${YELLOW}Retrieving AWS managed policies (this may take a while)...${ENDCOLOR}"
aws_managed_policy_arns=$(get_all_aws_managed_policies)
declare -A AWS_MANAGED_POLICY_ARNS=()
for policy in $(echo $aws_managed_policy_arns)
do
    name=$(echo $policy | jq --raw-output '.PolicyName')
    arn=$(echo $policy | jq --raw-output '.Arn')
    AWS_MANAGED_POLICY_ARNS[$name]="$arn"
done


get_aws_managed_policy_arn() {
    echo $AWS_MANAGED_POLICY_ARNS[$1]
}

attach_aws_managed_policy() {
    local policy_arn=$(get_aws_managed_policy_arn $1)
    if [ -z "$policy_arn" ] ; then
        echo -e "${RED}ERROR: The AWS managed policy $1 can't be found. Aborting.${ENDCOLOR}"
        exit 1
    else
        echo -e "${GREEN}  Attaching AWS managed policy $1...${ENDCOLOR}"
        aws sso-admin attach-managed-policy-to-permission-set --instance-arn $instance_arn --permission-set-arn $2 \
        --managed-policy-arn $policy_arn
    fi
}


detach_aws_managed_policy() {
    local policy_arn=$(get_aws_managed_policy_arn $1)
    if [ -z "$policy_arn" ] ; then
        echo -e "${RED}ERROR: The AWS managed policy $1 can't be found. Aborting.${ENDCOLOR}"
        exit 1
    else
        echo "${RED}  Detaching AWS managed policy $1...${ENDCOLOR}"
        aws sso-admin detach-managed-policy-from-permission-set --instance-arn $instance_arn --permission-set-arn $2 \
            --managed-policy-arn $policy_arn
    fi
}


for FILE in ${config_dir}/*.yaml
do 
    echo
    echo -e "${GREEN}====================================================================================================${ENDCOLOR}"
    echo -e "${YELLOW}    $FILE:${ENDCOLOR}"
    echo -e "${GREEN}----------------------------------------------------------------------------------------------------${ENDCOLOR}"
    echo
    json=$(cat $FILE | yq .)
    permission_set_name=$(echo $json | jq -r .permission_set_name)
    description=$(echo $json | jq -r .description)
    session_duration=$(echo $json | jq -r .session_duration)
    permissions_boundary=$(echo $json | jq -r .permissions_boundary)
    aws_managed_policies=$(echo $json | jq -rc .aws_managed_policies)
    inline_policy=$(echo $json | jq -r .inline_policy)

    permission_set_arn=$(get_permission_set_arn $permission_set_name)
    if [[ "$permission_set_arn" == "" ]] ; then
        echo -e ${YELLOW}$permission_set_name${ENDCOLOR} does not exist.

        if $dry_run; then
            echo "${GREEN}Would create permission set ${YELLOW}$permission_set_name${GREEN}...${ENDCOLOR}"
        else
            echo Creating it...
            permission_set_arn=$(aws sso-admin create-permission-set --instance-arn $instance_arn \
            --name $permission_set_name --description $description --session-duration $session_duration \
            --query 'PermissionSet.PermissionSetArn' --output text --no-paginate)

            if [[ ! "$inline_policy" == "null" ]] ; then
                echo Putting inline policy...
                aws sso-admin put-inline-policy-to-permission-set --instance-arn $instance_arn --permission-set-arn $permission_set_arn \
                --inline-policy $inline_policy
            fi

            if [[ ! "$permissions_boundary" == "null" ]] ; then
                echo Putting permissions boundary...
                aws sso-admin put-permissions-boundary-to-permission-set --instance-arn $instance_arn --permission-set-arn $permission_set_arn \
                --permissions-boundary "{\"CustomerManagedPolicyReference\": {\"Name\": \"$permissions_boundary\"}}"
            fi

            echo Attaching AWS managed policies...
            for policy_name in $(echo $aws_managed_policies | jq -rc '.[]')
            do
                attach_aws_managed_policy $policy_name $permission_set_arn
            done
        fi

    else
        echo -e ${YELLOW}$permission_set_name${ENDCOLOR} already exists.
        if $dry_run; then
            echo "${GREEN}Would update permission set ${YELLOW}$permission_set_name${GREEN}...${ENDCOLOR}"
        else
            echo Updating description and session duration...
            aws sso-admin update-permission-set --instance-arn $instance_arn --permission-set-arn $permission_set_arn \
            --description $description --session-duration $session_duration

            if [[ "$inline_policy" == "null" ]] ; then
                echo Deleting any inline policy...
                aws sso-admin delete-inline-policy-from-permission-set --instance-arn $instance_arn --permission-set-arn $permission_set_arn
            else
                echo Putting inline policy...
                aws sso-admin put-inline-policy-to-permission-set --instance-arn $instance_arn --permission-set-arn $permission_set_arn \
                --inline-policy $inline_policy
            fi

            if [[ ! "$permissions_boundary" == "null" ]] ; then
                echo Putting permissions boundary...
                aws sso-admin put-permissions-boundary-to-permission-set --instance-arn $instance_arn --permission-set-arn $permission_set_arn \
                --permissions-boundary "{\"CustomerManagedPolicyReference\": {\"Name\": \"$permissions_boundary\"}}"
            else
                echo Deleting any permissions boundary...
                aws sso-admin delete-permissions-boundary-from-permission-set --instance-arn $instance_arn --permission-set-arn $permission_set_arn
            fi

            echo Aligning AWS managed policies...
            current_managed_policies=$(aws sso-admin list-managed-policies-in-permission-set --instance-arn $instance_arn --permission-set-arn $permission_set_arn \
                --query 'AttachedManagedPolicies[].Name' | jq -rc .)
            policies_to_attach=$(jq -nc --argjson goal "$aws_managed_policies" --argjson current "$current_managed_policies" \
            '{"goal":$goal, "current":$current} | .goal-.current') 
            policies_to_detach=$(jq -nc --argjson goal "$aws_managed_policies" --argjson current "$current_managed_policies" \
            '{"goal":$goal, "current":$current} | .current-.goal') 

            for policy_name in $(echo $policies_to_attach | jq -rc '.[]')
            do
                attach_aws_managed_policy $policy_name $permission_set_arn
            done

            for policy_name in $(echo $policies_to_detach | jq -rc '.[]')
            do
                detach_aws_managed_policy $policy_name $permission_set_arn
            done

            echo Provisioning...
            aws sso-admin provision-permission-set --instance-arn $instance_arn --permission-set-arn $permission_set_arn \
            --target-type ALL_PROVISIONED_ACCOUNTS
        fi
    fi
done
